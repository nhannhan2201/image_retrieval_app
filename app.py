import streamlit as st
import pandas as pd
import faiss
from PIL import Image
import os
os.environ["STREAMLIT_WATCHER_TYPE"] = "none"
from utils.retrieval import load_model, query_images
from utils.ocr_search import search_ocr

# ================================
# C·∫•u h√¨nh trang
# ================================
st.set_page_config(page_title="Video Retrieval Demo", layout="wide")

# ================================
# Load d·ªØ li·ªáu
# ================================
@st.cache_resource
def load_all_data():
    # Load FAISS index
    index = faiss.read_index("data/merged_index.index")
    meta_df = pd.read_csv("data/metadata.csv")

    # Load CLIP model
    model, tokenizer, _ = load_model()

    # Load OCR data
    ocr_df = pd.read_csv("data/ocr_data.csv")

    return model, tokenizer, index, meta_df, ocr_df


# ================================
# Giao di·ªán
# ================================
st.title("üé• Video Retrieval Demo")
st.write("T√¨m ki·∫øm keyframe trong video b·∫±ng **CLIP (Visual)** ho·∫∑c **OCR text similarity (Text)**")

# Ch·ªçn ch·∫ø ƒë·ªô t√¨m ki·∫øm
mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c t√¨m ki·∫øm:", ["Visual Search (CLIP)", "OCR Search (Text)"])

# Load t·∫•t c·∫£ t√†i nguy√™n
model, tokenizer, index, meta_df, ocr_df = load_all_data()

# √î nh·∫≠p truy v·∫•n v√† s·ªë k·∫øt qu·∫£
query = st.text_input("Nh·∫≠p truy v·∫•n:", "ng∆∞·ªùi ƒë√†n √¥ng ƒëang ph√°t bi·ªÉu")
top_k = st.slider("S·ªë l∆∞·ª£ng k·∫øt qu·∫£", 1, 10, 5)

# ================================
# Th·ª±c thi t√¨m ki·∫øm
# ================================
if st.button("üîç T√¨m ki·∫øm"):
    if mode.startswith("Visual"):
        # --- Search b·∫±ng CLIP ---
        ids, distances = query_images(model, tokenizer, index, query, top_k)
        cols = st.columns(top_k)

        for i, (idx, dist) in enumerate(zip(ids, distances)):
            row = meta_df.iloc[idx]

            # X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n ·∫£nh an to√†n cho c·∫£ local v√† cloud
            img_path = row["full_path"]
            if not os.path.exists(img_path):
                filename = os.path.basename(img_path)
                # Tr√≠ch l·∫•y th∆∞ m·ª•c con, v√≠ d·ª•: keyframes/L22_V001/L22_V001
                parts = row["full_path"].replace("\\", "/").split("/")
                folder = "/".join(parts[-3:-1])
                img_path = os.path.join("data", "keyframes", folder, filename)

            try:
                img = Image.open(img_path)
                with cols[i]:
                    st.image(img, caption=f"{row['image_id']} (score={1/(1+dist):.3f})")
            except Exception as e:
                with cols[i]:
                    st.error(f"‚ùå L·ªói khi m·ªü ·∫£nh: {img_path}")
                    st.text(str(e))

    else:
        # --- Search b·∫±ng OCR ---
        results = search_ocr(ocr_df, query, top_k)
        st.write("### üßæ K·∫øt qu·∫£ OCR:")
        for r in results:
            st.markdown(f"**[{r['similarity']:.2f}]** ‚Üí `{r['content'][:120]}...`")
