import os
import streamlit as st
import pandas as pd
import faiss
from PIL import Image

from utils.retrieval import load_model, query_images
from utils.ocr_search import search_ocr

st.set_page_config(page_title="üé• Video Retrieval Demo", layout="wide")

# ======================
# üîß LOAD C√ÅC T√ÄI NGUY√äN
# ======================
@st.cache_resource
def load_model_and_index():
    model, tokenizer, preprocess = load_model()
    index = faiss.read_index("data/merged_index.index")
    return model, tokenizer, index

@st.cache_data
def load_metadata():
    return pd.read_csv("data/metadata.csv")

@st.cache_data
def load_ocr():
    try:
        return pd.read_csv("data/ocr_data.csv")
    except FileNotFoundError:
        return pd.DataFrame(columns=["id", "content"])

model, tokenizer, index = load_model_and_index()
meta_df = load_metadata()
ocr_df = load_ocr()

# ======================
# üß≠ GIAO DI·ªÜN CH√çNH
# ======================
st.title("üé• Video Retrieval Demo")
st.write("T√¨m ki·∫øm keyframe trong video b·∫±ng **CLIP (SigLIP2)** ho·∫∑c **OCR text search**")

mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c:", ["Visual Search (CLIP)", "OCR Search"])
query = st.text_input("üîç Nh·∫≠p truy v·∫•n:", "")
top_k = st.slider("S·ªë l∆∞·ª£ng k·∫øt qu·∫£ hi·ªÉn th·ªã:", 1, 10, 5)

if st.button("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm"):
    if not query.strip():
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p truy v·∫•n tr∆∞·ªõc khi t√¨m ki·∫øm.")
        st.stop()

    if mode.startswith("Visual"):
        try:
            ids, dists = query_images(model, tokenizer, index, query, top_k)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi truy v·∫•n FAISS: {e}")
            st.stop()

        cols = st.columns(top_k)
        for i, (idx, dist) in enumerate(zip(ids, dists)):
            if idx < len(meta_df):
                row = meta_df.iloc[idx]
                fp = row.get("full_path", "")

                # ƒë·∫£m b·∫£o path h·ª£p l·ªá tr√™n Streamlit Cloud
                if not os.path.exists(fp):
                    fp = os.path.join("data", "keyframes", os.path.basename(fp))

                with cols[i]:
                    if os.path.exists(fp):
                        img = Image.open(fp)
                        st.image(img, caption=f"{row.get('image_id', idx)} (score={1/(1+dist):.3f})")
                    else:
                        st.error(f"·∫¢nh kh√¥ng t·ªìn t·∫°i: {fp}")
            else:
                with cols[i]:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y metadata cho index n√†y.")
    else:
        # OCR Search
        results = search_ocr(ocr_df, query, top_k)
        if not results:
            st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ OCR n√†o ph√π h·ª£p.")
        else:
            st.write("### üßæ K·∫øt qu·∫£ OCR:")
            for r in results:
                st.markdown(f"**[{r['similarity']:.2f}]** ‚Üí `{r['content'][:150]}...`")
